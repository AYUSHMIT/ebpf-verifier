
kern/manual_memcpy.o:	file format ELF64-BPF

Disassembly of section sk_skb/manual-memcpy:
manual_memcpy:
       0:	r2 = *(u32 *)(r1 + 76)
       1:	r1 = *(u32 *)(r1 + 80)
       2:	r1 -= r2
       3:	*(u64 *)(r10 - 8) = r1
       4:	r1 = *(u64 *)(r10 - 8)
       5:	if r1 s> 127 goto +38 <LBB0_3>
       6:	r1 = 217020518514230019 ll
       8:	*(u64 *)(r10 - 24) = r1
       9:	*(u64 *)(r10 - 32) = r1
      10:	*(u64 *)(r10 - 40) = r1
      11:	*(u64 *)(r10 - 48) = r1
      12:	*(u64 *)(r10 - 56) = r1
      13:	*(u64 *)(r10 - 64) = r1
      14:	*(u64 *)(r10 - 72) = r1
      15:	*(u64 *)(r10 - 80) = r1
      16:	*(u64 *)(r10 - 88) = r1
      17:	*(u64 *)(r10 - 96) = r1
      18:	*(u64 *)(r10 - 104) = r1
      19:	*(u64 *)(r10 - 112) = r1
      20:	*(u64 *)(r10 - 120) = r1
      21:	*(u64 *)(r10 - 128) = r1
      22:	*(u64 *)(r10 - 136) = r1
      23:	*(u64 *)(r10 - 144) = r1
      24:	r1 = *(u64 *)(r10 - 8)
      25:	r3 = r1
      26:	r3 += -1
      27:	*(u64 *)(r10 - 8) = r3
      28:	r3 = 1
      29:	if r3 s> r1 goto +14 <LBB0_3>

LBB0_2:
      30:	r1 = *(u64 *)(r10 - 8)
      31:	r3 = *(u64 *)(r10 - 8)
      32:	r4 = r2
      33:	r4 += r3
      34:	r3 = r10
      35:	r3 += -144
      36:	r3 += r1
      37:	r1 = *(u8 *)(r3 + 0)
      38:	*(u8 *)(r4 + 0) = r1
      39:	r1 = *(u64 *)(r10 - 8)
      40:	r3 = r1
      41:	r3 += -1
      42:	*(u64 *)(r10 - 8) = r3
      43:	if r1 s> 0 goto -14 <LBB0_2>

LBB0_3:
      44:	r0 = 0
      45:	exit
